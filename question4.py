# -*- coding: utf-8 -*-
"""Question4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iKXWbhDsjUSbmTuX8FAt-A-VyAgrIm9O
"""

!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

#2.1 Get the file
downloaded = drive.CreateFile({'id':'1GyBWDIRa6Pe8cTTb1qMuwxCSS0JYjipA'}) # replace the id with id of file you want to access
downloaded.GetContentFile('test_restaurant.csv')

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pylab as plt
# %matplotlib inline
from matplotlib.pylab import rcParams
rcParams['figure.figsize']=[10,6]
from datetime import datetime
from pandas import Series

#Getting the data
dataset1=pd.read_csv('test_restaurant.csv',index_col=[0],parse_dates=[0],squeeze=True)
dataset1.head()

#Dividing the data to test and train
dataset_train=dataset1[0:3287]
dataset_test=dataset1[3287:3652]

from statsmodels.graphics.tsaplots import plot_acf,plot_pacf
plot_acf(dataset1) #to determine the q value in arima model (p,d,q)

plot_pacf(dataset1) #to determine p value

from statsmodels.tsa.arima_model import ARIMA
#Fitting the arima model
restaurant_model=ARIMA(dataset_train,order=(3,1,1))

restaurant_model_fit=restaurant_model.fit()

restaurant_model_fit.aic

#Conatins the forecast values
restaurant_forecast=restaurant_model_fit.forecast(steps=364)[0]

from sklearn.metrics import mean_squared_error
#Error value for predicted and actual
np.sqrt(mean_squared_error(dataset_test,restaurant_forecast))

restaurant_model_fit.plot_predict(1,3652) #plotting the model

restaurant_model_fit.forecast(steps=1)

restaurant_mean=dataset1.rolling(window=30).mean()
dataset1.plot()

restaurant_mean.plot()

series_value=dataset1.values

value=pd.DataFrame(series_value)

#Naive approach using the previous value to predict the next day value
restaurant_df=pd.concat([value,value.shift(1)],axis=1)

restaurant_df.head()

restaurant_df.columns=['Actual_visitors','Forecast_visitors']

restaurant_df.head()

restaurant_test=restaurant_df[1:]

restaurant_test.head()

#Removing outliers
restaurant_test=restaurant_test[0:3649]

vistors_error=mean_squared_error(restaurant_test.Actual_visitors,restaurant_test.Forecast_visitors)

#Naive approach error is less compared to ARIMA model
vistors_error
np.sqrt(vistors_error)

restaurant_df